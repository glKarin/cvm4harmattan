diff -Naur orig/midp/src/lowlevelui/putpixel_port/stubs/native/gxjport_text.c patched/midp/src/lowlevelui/putpixel_port/stubs/native/gxjport_text.c
--- orig/midp/src/lowlevelui/putpixel_port/stubs/native/gxjport_text.c	2011-02-10 12:09:45.000000000 +0100
+++ patched/midp/src/lowlevelui/putpixel_port/stubs/native/gxjport_text.c	2011-03-27 15:54:20.000000000 +0200
@@ -31,46 +31,50 @@
  *
  * platform dependent character drawing
  */
- 
+
+typedef int fn_draw_chars(int, const jshort *, void *, int, int, int, int, int, int, int, const jchar *, int);
+static fn_draw_chars *smartphone_draw_chars = NULL;
+
+typedef int fn_get_font_info(int, int, int, int *, int *, int *);
+static fn_get_font_info *smartphone_get_font_info = NULL;
+
+typedef int fn_get_chars_width(int, int, int, const jchar *, int);
+static fn_get_chars_width *smartphone_get_chars_width = NULL;
+
+void initDrawChars(fn_draw_chars *draw, fn_get_font_info *info, fn_get_chars_width *width) {
+    smartphone_draw_chars = draw;
+    smartphone_get_font_info = info;
+    smartphone_get_chars_width = width;
+}
+
 int gxjport_draw_chars(int pixel, const jshort *clip, void *dst, int dotted,
                        int face, int style, int size,
                        int x, int y, int anchor,
                        const jchar *chararray, int n) {
-    (void)pixel;
-    (void)clip;
-    (void)dst;
-    (void)dotted;
-    (void)face;
-    (void)style;
-    (void)size;
-    (void)x;
-    (void)y;
-    (void)anchor;
-    (void)chararray;
-    (void)n;
-    
-    return KNI_FALSE;
-}                           
+
+    if (!smartphone_draw_chars) {
+        return KNI_FALSE;
+    }
+
+    return (*smartphone_draw_chars)(pixel, clip, dst, dotted, face, style, size, x, y, anchor, chararray, n);
+}
 
 int gxjport_get_font_info(int face, int style, int size,
                           int *ascent, int *descent, int *leading) {
-    (void)face;
-    (void)style;
-    (void)size;
-    (void)ascent;
-    (void)descent;
-    (void)leading;
-                          
-    return KNI_FALSE;
-}                            
+
+    if (!smartphone_get_font_info) {
+        return KNI_FALSE;
+    }
+
+    return (*smartphone_get_font_info)(face, style, size, ascent, descent, leading);
+}
 
 int gxjport_get_chars_width(int face, int style, int size,
                             const jchar *charArray, int n) {
-    (void)face;
-    (void)style;
-    (void)size;
-    (void)charArray;
-    (void)n;
 
-    return -1;
+    if (!smartphone_get_chars_width) {
+        return -1;
+    }
+
+    return (*smartphone_get_chars_width)(face, style, size, charArray, n);
 }
