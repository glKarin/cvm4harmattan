diff -Naur orig/cdc/src/share/classes/sun/misc/MIDPLauncher.java patched/cdc/src/share/classes/sun/misc/MIDPLauncher.java
--- orig/cdc/src/share/classes/sun/misc/MIDPLauncher.java	2011-03-09 19:15:59.000000000 +0100
+++ patched/cdc/src/share/classes/sun/misc/MIDPLauncher.java	2012-01-26 14:02:21.000000000 +0100
@@ -24,6 +24,14 @@
  */
 
 /*
+ * NOTICE: Portions Copyright (c) 2007-2010 Davy Preuveneers.
+ * This file has last been modified by Davy Preuveneers on 2010-02-23. The
+ * changes are licensed under the terms of the GNU General Public
+ * License version 2. This notice was added to meet the conditions of
+ * Section 3.a of the GNU General Public License version 2.
+ */
+
+/*
  * This is a standalone launcher that launches MIDP using
  * the MIDPImplementationClassLoader.
  */
@@ -33,7 +41,14 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.InvocationTargetException;
 import java.io.File;
+import java.io.FileInputStream;
 import java.util.StringTokenizer;
+import java.util.jar.Manifest;
+import java.util.jar.JarFile;
+import java.util.jar.Attributes;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Iterator;
 
 public final class MIDPLauncher {
     static private String suitePath[] = new String[0];
@@ -42,14 +57,32 @@
         return suitePath;
     }
 
+    /* Process the properties of a Manifest or JAD file. */
+    private static void processSuiteProperties(Manifest manifest, HashMap midletProperties) {
+        try {
+            Attributes attributes = manifest.getMainAttributes();
+            Iterator keys = attributes.keySet().iterator();
+            while (keys.hasNext()) {
+                Attributes.Name key = (Attributes.Name)keys.next();
+                midletProperties.put(key.toString(), attributes.get(key).toString());
+            }
+        }
+        catch (Exception e) {
+            System.err.println("Can't read manifest file");
+            e.printStackTrace();
+        }
+    }
+
     public static void main(String args[]) {
         int i, j, num;
         File midppath[] = new File[0];
         String midppathString = null;
         String suitepathString = null; 
+        String jadpathString = null; 
         StringTokenizer components;
         String mainArgs[];
         int numMainArgs = args.length;
+        HashMap midletProperties = null;
 
         /* Process arguments */
         for (i = 0; i < args.length; i++) {
@@ -73,10 +106,32 @@
                 suitePath = new String[num];
                 for (j = 0; j < num; j++) {
                     suitePath[j] = components.nextToken();
-	        }
+                }
                 args[i-1] = args[i] = null;
                 numMainArgs -= 2;
+            } else if (arg.equals("-jadpath")) {
+                jadpathString = args[++i];
+                args[i-1] = args[i] = null;
+                numMainArgs -= 2;
+            }
+        }
+
+        midletProperties = new HashMap();
+        try {
+            if (suitepathString != null) {
+                JarFile jarFile = new JarFile(suitepathString);
+                processSuiteProperties(jarFile.getManifest(), midletProperties);
             }
+
+            if (jadpathString != null) {
+                FileInputStream fis = new FileInputStream(jadpathString);
+                processSuiteProperties(new Manifest(fis), midletProperties);
+                fis.close();
+            }
+        }
+        catch (Exception e) {
+            System.err.println("Can't read manifest file");
+            e.printStackTrace();
         }
 
         /* Prepare args for the MIDletSuiteLoader.main() */
@@ -85,8 +140,8 @@
         for (j = 0; j < args.length; j++) {
             if (args[j] != null) {
                 mainArgs[k++] = args[j];
-	    }
-	}
+            }
+        }
 
         /* Create MIDPImplementationClassLoader */
         MIDPImplementationClassLoader midpImplCL = 
@@ -94,16 +149,16 @@
 
         /* Load MIDletSuiteLoader using MIDPImplementationClassLoader
          * and invoke it's main() method. */
-	String loaderName = null;
+        String loaderName = null;
         try {
             loaderName = System.getProperty(
                 "com.sun.midp.mainClass.name",
                 "com.sun.midp.main.CdcMIDletSuiteLoader");
             Class suiteloader = midpImplCL.loadClass(loaderName);
-            Class loaderArgs[] = {mainArgs.getClass()};
-            Method mainMethod = suiteloader.getMethod("main", loaderArgs);
-            Object args2[] = {mainArgs};
-            mainMethod.invoke(null, args2);
+            Class loaderArgs[] = {mainArgs.getClass(), midletProperties.getClass()};
+            Method launchMethod = suiteloader.getMethod("launchUninstalledSuite", loaderArgs);
+            Object args2[] = {mainArgs, midletProperties};
+            launchMethod.invoke(null, args2);
         } catch (ClassNotFoundException ce) {
             System.err.println("Can't find " + loaderName);
         } catch (NoSuchMethodException ne) {
diff -Naur orig/midp/src/ams/cdc_application/classes/com/sun/midp/main/CdcMIDletSuiteLoader.java patched/midp/src/ams/cdc_application/classes/com/sun/midp/main/CdcMIDletSuiteLoader.java
--- orig/midp/src/ams/cdc_application/classes/com/sun/midp/main/CdcMIDletSuiteLoader.java	2011-03-09 19:17:59.000000000 +0100
+++ patched/midp/src/ams/cdc_application/classes/com/sun/midp/main/CdcMIDletSuiteLoader.java	2012-01-26 14:02:21.000000000 +0100
@@ -24,6 +24,14 @@
  * information or have any questions.
  */
 
+/*
+ * NOTICE: Portions Copyright (c) 2007-2010 Davy Preuveneers.
+ * This file has last been modified by Davy Preuveneers on 2010-02-23. The
+ * changes are licensed under the terms of the GNU General Public
+ * License version 2. This notice was added to meet the conditions of
+ * Section 3.a of the GNU General Public License version 2.
+ */
+
 package com.sun.midp.main;
 
 import javax.microedition.io.ConnectionNotFoundException;
@@ -39,6 +47,9 @@
 import com.sun.midp.midletsuite.*;
 import com.sun.midp.security.*;
 import com.sun.midp.rms.RmsEnvironment;
+import com.sun.midp.util.Properties;
+import java.util.HashMap;
+import java.util.Iterator;
 
 /**
  * The first class loaded in VM by midp_run_midlet_with_args to initialize
@@ -57,6 +68,31 @@
     /* Sends foreground events to displays. */
     protected CdcForegroundEventProducer foregroundEventProducer;
 
+    /** Holds the properties of the Manifest and the JAD file of a MIDlet */
+    protected static Properties properties = new Properties();
+
+    /**
+     * Called at the initial start of the VM for a MIDlet with properties.
+     * Initializes the properties specified in the manifest and the jad file
+     * before invoking the main method.
+     *
+     * @param args the MIDlet args for main()
+     * @param entries the MIDlet properties
+     */
+    public static void launchUninstalledSuite(String args[], HashMap entries) {
+        properties = new Properties();
+        Iterator keys = entries.keySet().iterator();
+        while (keys.hasNext()) {
+            String key = (String)keys.next();
+            properties.setProperty(key, (String)(entries.get(key)));
+        }
+
+        // A midlet has always a manifest with mandatory properties. The main()
+        // method should never be invoked directly for running an uninstalled
+        // suite, even if no JAD file is specified.
+        main(args);
+    }
+
     /**
      * Called at the initial start of the VM.
      * Initializes internal security and any other AMS classes related
@@ -187,7 +223,7 @@
         if (suiteId == MIDletSuite.INTERNAL_SUITE_ID) {
             // assume a class name of a MIDlet in the classpath
             suite = InternalMIDletSuiteImpl.create(storage, midletDisplayName,
-                        suiteId);
+                        suiteId, properties);
         } else {
             suite = storage.getMIDletSuite(suiteId, false);
             Logging.initLogSettings(suiteId);
